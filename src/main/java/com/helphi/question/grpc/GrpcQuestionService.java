package com.helphi.question.grpc;

import com.helphi.question.api.QuestionType;
import com.helphi.question.api.grpc.*;
import com.helphi.question.api.grpc.QuestionServiceGrpc.QuestionServiceImplBase;
import com.helphi.question.api.Answer;
import com.helphi.question.api.Question;
import com.helphi.question.api.UserResponse;
import com.helphi.question.api.mapper.*;
import com.helphi.question.svc.IquestionService;
import io.grpc.stub.StreamObserver;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import lombok.RequiredArgsConstructor;
import net.devh.boot.grpc.server.service.GrpcService;

import org.springframework.beans.factory.annotation.Autowired;

/**GRpc server for the question service. 
 * Base autogenerated classes can be found in question-api.
 * To access add question-api as a dependency in the client project.
 */
@GrpcService
@RequiredArgsConstructor
public class GrpcQuestionService extends QuestionServiceImplBase {

    @Autowired
    private final IquestionService questionService;

    @Override
    public void getQuestion(GetQuestionRequest request,
        StreamObserver<com.helphi.question.api.grpc.Question> responseObserver) {
   
        Question question = questionService.getQuestion(request.getQuestionId(), 
            request.getConditionId());
        QuestionMapper questionMapper = new QuestionMapper();
        com.helphi.question.api.grpc.Question grpcQuestion = questionMapper.mapToGrpc(question);

        responseObserver.onNext(grpcQuestion);
        responseObserver.onCompleted();
    }

    @Override
    public void getConditionQuestions(GetConditionQuestionsRequest request,
        StreamObserver<GetConditionQuestionsReply> responseObserver) {

        List<Question> questions = questionService.getConditionQuestions(request.getConditionId());
        GetConditionQuestionsReply response = null;

        List<com.helphi.question.api.grpc.Question> grpcQuestions = new ArrayList<>();
        QuestionMapper questionMapper = new QuestionMapper();

        if (questions != null) {       
            for (Question question : questions) {        
                com.helphi.question.api.grpc.Question grpcQuestion = questionMapper.mapToGrpc(question);
                grpcQuestions.add(grpcQuestion);           
            }

            response = GetConditionQuestionsReply.newBuilder()
                .addAllQuestions(grpcQuestions)
                .build();
        }

        responseObserver.onNext(response);
        responseObserver.onCompleted();
    }

    @Override
    public void getUserResponse(GetUserResponseRequest request,
                                StreamObserver<com.helphi.question.api.grpc.UserResponse> responseObserver) {

        UserResponse userResponse = questionService.getUserResponse(request.getUserId(), 
            request.getConditionId());

        UserResponseMapper userResponseMapper = new UserResponseMapper();
        com.helphi.question.api.grpc.UserResponse grpcUserResponse = 
            userResponseMapper.mapToGrpc(userResponse);

        responseObserver.onNext(grpcUserResponse);
        responseObserver.onCompleted();
    }

    @Override
    public void getUsersResponses(GetUserResponsesRequest request,
                                  StreamObserver<GetUserResponsesReply> responseObserver) {

        GetUserResponsesReply grpcUserResposeReply = null;

        List<UserResponse> userResponses = questionService.getUserResponses(request.getUserId(), 
            request.getTimescale());

        List<com.helphi.question.api.grpc.UserResponse> grpcUserResponses = new ArrayList<>();
        UserResponseMapper userResponseMapper = new UserResponseMapper();

        if (userResponses != null) {
            for (UserResponse userResponse : userResponses) {        
                com.helphi.question.api.grpc.UserResponse grpcUserResponse = 
                    userResponseMapper.mapToGrpc(userResponse);
                grpcUserResponses.add(grpcUserResponse);           
            }

            grpcUserResposeReply = GetUserResponsesReply.newBuilder()
                .addAllResponse(grpcUserResponses)
                .build();
        }

        responseObserver.onNext(grpcUserResposeReply);
        responseObserver.onCompleted();
    }

    @Override
    public void getUsersResponsesForCondition(GetUsersResponsesForConditionRequest request, 
        StreamObserver<GetUserResponsesReply> responseObserver) {

        GetUserResponsesReply grpcUserResposeReply = null;

        List<UserResponse> userResponses = questionService.getUsersResponsesForCondition(
            request.getUserId(), request.getConditionId(), request.getTimescale());

        List<com.helphi.question.api.grpc.UserResponse> grpcUserResponses = new ArrayList<>();
        UserResponseMapper userResponseMapper = new UserResponseMapper();

        if (userResponses != null) {
            for (UserResponse userResponse : userResponses) {        
                com.helphi.question.api.grpc.UserResponse grpcUserResponse = 
                    userResponseMapper.mapToGrpc(userResponse);
                grpcUserResponses.add(grpcUserResponse);           
            }

            grpcUserResposeReply = GetUserResponsesReply.newBuilder()
                .addAllResponse(grpcUserResponses)
                .build();
        }   

        responseObserver.onNext(grpcUserResposeReply);
        responseObserver.onCompleted();
    }

    @Override
    public void addQuestion(QuestionRequest request, 
        StreamObserver<com.helphi.question.api.grpc.Question> responseObserver) {


        AnswerMapper mapper = new AnswerMapper();
        List<Answer> apiAnswers = new ArrayList<>();
        for(com.helphi.question.api.grpc.Answer answer : request.getPossibleAnswersList()) {
            apiAnswers.add(mapper.mapFromGrpc(answer));
        }


        Question questionToAdd = new Question(Long.MIN_VALUE, request.getConditionId(),
                request.getQuestionText(), QuestionType.valueOf(request.getQuestionType()),
                apiAnswers,
                new HashSet<>(request.getAnswerScoreRangeList())
            );

        Question addedQuestion = questionService.addQuestion(questionToAdd);

        QuestionMapper questionMapper = new QuestionMapper();
        com.helphi.question.api.grpc.Question grpcQuestion = questionMapper.mapToGrpc(addedQuestion);

        responseObserver.onNext(grpcQuestion);
        responseObserver.onCompleted();
    }

    @Override
    public void updateQuestion(com.helphi.question.api.grpc.Question request, 
        StreamObserver<com.helphi.question.api.grpc.Question> responseObserver) {
        
        QuestionMapper questionMapper = new QuestionMapper();
        Question question = questionMapper.mapFromGrpc(request);

        Question updatedQuestion = 
            questionService.updateQuestion(request.getQuestionId(), question);

        com.helphi.question.api.grpc.Question grpcQuestion = questionMapper.mapToGrpc(updatedQuestion);

        responseObserver.onNext(grpcQuestion);
        responseObserver.onCompleted();
    }

    @Override
    public void deleteQuestion(DeleteQuestionRequest request, 
        StreamObserver<RequestReply> responseObserver) {

        RequestReply deleteResponse = questionService.deleteQuestion(request.getQuestionId());

        responseObserver.onNext(deleteResponse);
        responseObserver.onCompleted();
    }

    @Override
    public void deleteAllQuestions(DeleteAllQuestionsRequest request, 
        StreamObserver<RequestReply> responseObserver) {
        RequestReply deleteResponse = questionService.deleteAllQuestion(request.getConditionId());

        responseObserver.onNext(deleteResponse);
        responseObserver.onCompleted();
    }

    @Override
    public void addUserResponse(com.helphi.question.api.grpc.UserResponse request, 
        StreamObserver<com.helphi.question.api.grpc.UserResponse> responseObserver) {

        UserResponseMapper userResponseMapper = new UserResponseMapper();
        UserResponse response = userResponseMapper.mapFromGrpc(request);
        UserResponse addedResponse = questionService.addUserResponse(response);

        com.helphi.question.api.grpc.UserResponse grpcAddedResponse = 
            userResponseMapper.mapToGrpc(addedResponse);
        
        responseObserver.onNext(grpcAddedResponse);
        responseObserver.onCompleted();
    }

    @Override
    public void updateUserResponse(com.helphi.question.api.grpc.UserResponse  request, 
        StreamObserver<com.helphi.question.api.grpc.UserResponse> responseObserver) {

        UserResponseMapper userResponseMapper = new UserResponseMapper();
        UserResponse response = userResponseMapper.mapFromGrpc(request);
        UserResponse updatedResponse = questionService.updateUserResponse(response);

        com.helphi.question.api.grpc.UserResponse grpcUpdatedResponse = 
            userResponseMapper.mapToGrpc(updatedResponse);
        
        responseObserver.onNext(grpcUpdatedResponse);
        responseObserver.onCompleted();
    }

    @Override
    public void deleteUserResponse(DeleteUserResponseRequest request, 
        StreamObserver<RequestReply> responseObserver) {
        
        RequestReply deleteRequestReply = 
            questionService.deleteUserResponse(request.getResponseId());

        responseObserver.onNext(deleteRequestReply);
        responseObserver.onCompleted();
    }

    @Override
    public void deleteUserResponsesForCondition(DeleteUserResponsesForConditionRequest request, 
        StreamObserver<RequestReply> responseObserver) {

        RequestReply deleteRequestReply =
            questionService.deleteUserResponsesForCondition(request.getConditionId());

        responseObserver.onNext(deleteRequestReply);
        responseObserver.onCompleted();
    }

    @Override
    public void deleteAllUserResponses(DeleteUserResponsesRequest request, 
        StreamObserver<RequestReply> responseObserver) {
        
        RequestReply deleteRequestReply = 
            questionService.deleteAllUserResponses(request.getUserId());

        responseObserver.onNext(deleteRequestReply);
        responseObserver.onCompleted();
    }

    @Override
    public void getRecentPatientStatus(ListPatientStatusRequest request, StreamObserver<PatientStatusList> responseObserver) {
        List<com.helphi.question.api.PatientStatus> statuses = this.questionService.getRecentPatientStatuses(request);

        List<PatientStatus> grpcStatuses = new ArrayList<>();

        PatientStatusMapper mapper = new PatientStatusMapper();
        for (com.helphi.question.api.PatientStatus patientStatus : statuses) {
            grpcStatuses.add(mapper.mapToGrpc(patientStatus));
        }

        PatientStatusList grpcMessage = PatientStatusList.newBuilder().addAllStatuses(grpcStatuses).build();

        responseObserver.onNext(grpcMessage);
        responseObserver.onCompleted();
    }

    @Override
    public void getCurrentPatientStatus(GetUserStatusRequest request, StreamObserver<PatientStatus> responseObserver) {

        com.helphi.question.api.PatientStatus patientStatus =
                this.questionService.getCurrentStatus(request.getConditionId(), request.getUserId());

        PatientStatusMapper mapper = new PatientStatusMapper();

        responseObserver.onNext(mapper.mapToGrpc(patientStatus));
        responseObserver.onCompleted();
    }

    @Override
    public void getCheckIn(GetConditionCheckInRequest request, StreamObserver<ConditionCheckIn> responseObserver) {
        com.helphi.question.api.ConditionCheckIn checkIn = this.questionService.getConditionCheckIn(request.getConditionId());

        if(checkIn == null){
            responseObserver.onNext(null);
        } else {
            CheckInMapper mapper = new CheckInMapper();
            responseObserver.onNext(mapper.mapToGrpc(checkIn));
        }



        responseObserver.onCompleted();
    }

    @Override
    public void addCheckIn(ConditionCheckIn request, StreamObserver<RequestReply> responseObserver) {

        CheckInMapper mapper = new CheckInMapper();

        this.questionService.addCheckIn(mapper.mapFromGrpc(request));

         RequestReply reply = RequestReply.newBuilder().setSuccess(true).build();

        responseObserver.onNext(reply);
        responseObserver.onCompleted();
    }

    @Override
    public void updateCheckIn(ConditionCheckIn request, StreamObserver<RequestReply> responseObserver) {
        CheckInMapper mapper = new CheckInMapper();

        this.questionService.updateCheckIn(mapper.mapFromGrpc(request));

        RequestReply reply = RequestReply.newBuilder().setSuccess(true).build();

        responseObserver.onNext(reply);
        responseObserver.onCompleted();
    }
}